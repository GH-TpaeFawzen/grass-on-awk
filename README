Grass on AWK - AWKでちょっと草を
================================
by naoya_t


ちょっと草植えときますね型言語 GrassをAWKで実装してみるの巻。

Grass は λ-calculus（ラムダ計算）をベースにした「関数型言語」で、
「関数定義」「関数適用」のみの組合せでプログラムを表現します。
使う文字は W,w,v の３種類。（その他の文字は無視）

今回、こういう言語の実装には正直向いていなさそうなAWKで実装してみました。
AWKの上でYコンビネータが動いているのは自分でもあまり想像したくないのですが・・・
grass.elのところにあるサンプル※のうち、入力を伴うもの以外はとりあえず全部通るようです。
※http://www11.atwiki.jp/s-irie/pages/20.html#sample-codes


実装方法（概説）
===============
・言語仕様としては、本家ドキュメントのほか、ここが参考になりました。
・せめて配列がAWKでファーストクラスなオブジェクトだったら楽なんですが...
・仕方がないので、文字列でなんでも表現しようではないか
・関数は "/i[j]a.b;c.d;e.f;...;y.z;" のような文字列で表現。
　iは引数の個数（整数）、jは環境の参照番号（整数）。
　a.b;（a,bはそれぞれ整数）で、スタックの上からa番目にある関数を同じくb番目の何かを引数として適用（ないし部分適用）。
・ここでaは1以上の整数だが、0をidentity、というか λx.x とし、これを利用してTrue/Falseを実装。
・引数が２個以上の関数に１引数を与えた場合、部分適用を行い、引数を１つ減らした関数，
　即ちiを１減らし、環境jにその引数をpushしたものを返す。
・プリミティブ関数は /@in, /@out, /@succ のように /@ で始まる文字列で表現。
・数値(0-255)はそのまま。
　（ちなみにAWKでは "5"-3=2,"2"*"3"=6, 5 "7" = "57" のように数値文脈では数値に、文字列文脈では文字列として扱われる）
・環境は "hoge:hoge:hoge:/@out:/@succ:119:/@in:E:" のような文字列で表現。
　これを配列に保持し、配列の何番目に保存しているかを参照番号とする。
・関数では";"、環境では":"とデリミタを使い分けているのは、最初、関数（文字列）の中に環境も入れていた名残り。 


サンプル
========
http://www11.atwiki.jp/s-irie/pages/20.html#sample-codes ほか

grass-sample-w (samples/w.g)
:「w」を1個出力します。

grass-sample-w16 (samples/church.g)
: チャーチ数で2^2=4、2^4=16を計算し、「w」を16個出力します。

grass-sample-ascii (samples/ascii.g)
: ASCII印字可能文字をコード順に出力します。

grass-sample-hello (samples/hello.g)
: 「Hello, world!」と出力します。
: コードを短くするために、いろいろ細工をしています。
: Yコンビネータを使ってみたりｗｗｗｗ。ちなみに長さは551文字です。

grass-sample-factorial (samples/factorial.g)
: 6の階乗、6!=720を再帰的に計算し、「w」を720個出力します。
: 再帰のためにYコンビネータを使っています。

grass-sample-fibonacci (samples/fib.g)
: フィボナッチ数の12番目、144を再帰的に計算し、「w」を144個出力します。
: 再帰のためにYコンビネータを使っています。

grass-sample-fibonacci-iterative (samples/fibiter.g)
: フィボナッチ数を先頭から12番目までを順に計算し、「w」を棒グラフのように出力します。
: ループのためにYコンビネータを使っています。

grass-sample-infinity (samples/infty.g)
: Grassの公式サンプルです。無限に「w」を出力し続けます。
